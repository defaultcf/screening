require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ScreeningsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Screening. As you add validations to Screening, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      "manager": user,
      "title": "MyTitle",
      "body": "MyBody",
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ScreeningsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:screening) { FactoryBot.create(:screening) }
  let(:user) { screening.manager }
  let(:user2) { FactoryBot.create(:user) }
  before do
    login_user user
  end

  # after do
  #   sign_out user
  # end

  describe "GET #index" do
    it "returns a success response" do
      get :index
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: { id: screening.id }
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      get :edit, params: { id: screening.id }
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Screening" do
        expect {
          post :create, params: { screening: valid_attributes }
        }.to change(Screening, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          title: "MyTitle2",
          body: "MyBody2",
        }
      }

      it "updates the requested screening" do
        put :update, params: { id: screening.id, screening: new_attributes }
        screening.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the screening" do
        put :update, params: { id: screening.id, screening: valid_attributes }
        expect(response).to redirect_to(screening)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested screening" do
      expect {
        delete :destroy, params: { id: screening.id }
      }.to change(Screening, :count).by(-1)
    end

    it "redirects to the screenings list" do
      delete :destroy, params: { id: screening.id }
      expect(response).to redirect_to(screenings_url)
    end
  end

  describe "POST #join" do
    before do
      login_user user2
    end

    it "参加表明が為される" do
      expect {
        post :join, params: { id: screening.id, message: "hello" }
      }.to change(JoinScreening, :count).by(1)
    end
  end
end
